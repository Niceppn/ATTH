import React, { useState } from "react";
import {
  Card,
  Row,
  Col,
  Button,
  Form,
  Table,
  Badge,
  Modal,
  Tab,
  Tabs,
  Alert,
} from "react-bootstrap";

const SystemSettings = () => {
  const [activeTab, setActiveTab] = useState("categories");
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState("");
  const [selectedItem, setSelectedItem] = useState(null);

  // Testing Categories Data
  const testingCategories = [
    {
      id: 1,
      name: "Accessibility Testing",
      description: "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô WCAG",
      standards: ["WCAG 2.1 AA", "Section 508", "EN 301 549"],
      isActive: true,
      createdDate: "2024-01-01",
    },
    {
      id: 2,
      name: "Performance Testing",
      description: "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß",
      standards: ["Load Testing", "Stress Testing", "Volume Testing"],
      isActive: true,
      createdDate: "2024-01-01",
    },
    {
      id: 3,
      name: "Usability Testing",
      description: "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞ UX",
      standards: ["ISO 9241", "Nielsen's Principles", "User-Centered Design"],
      isActive: true,
      createdDate: "2024-01-01",
    },
    {
      id: 4,
      name: "Security Testing",
      description: "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà",
      standards: ["OWASP Top 10", "ISO 27001", "NIST Framework"],
      isActive: false,
      createdDate: "2024-01-01",
    },
  ];

  // Facilities Data
  const facilities = [
    {
      id: 1,
      name: "‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Accessibility",
      type: "testing-room",
      capacity: 8,
      equipment: [
        "Screen Reader",
        "Voice Recognition",
        "Keyboard Navigation Tools",
      ],
      location: "‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏´‡πâ‡∏≠‡∏á 301",
      status: "available",
      bookings: 5,
    },
    {
      id: 2,
      name: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏ç‡πà",
      type: "meeting-room",
      capacity: 20,
      equipment: ["Projector", "Video Conference", "Whiteboard"],
      location: "‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏´‡πâ‡∏≠‡∏á 201",
      status: "occupied",
      bookings: 8,
    },
    {
      id: 3,
      name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance",
      type: "equipment",
      capacity: 1,
      equipment: ["LoadRunner", "JMeter", "Performance Monitoring Tools"],
      location: "IT Department",
      status: "maintenance",
      bookings: 12,
    },
    {
      id: 4,
      name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£",
      type: "assistive-tech",
      capacity: 5,
      equipment: ["JAWS", "NVDA", "Voice Control", "Switch Access"],
      location: "‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏ä‡∏±‡πâ‡∏ô 1",
      status: "available",
      bookings: 3,
    },
  ];

  // Template Forms Data
  const templateForms = [
    {
      id: 1,
      name: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö WCAG 2.1",
      category: "accessibility",
      description: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö WCAG 2.1 AA",
      version: "2.1.0",
      lastUpdated: "2024-01-15",
      downloads: 45,
      isDefault: true,
    },
    {
      id: 2,
      name: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance",
      category: "performance",
      description: "‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û",
      version: "1.5.2",
      lastUpdated: "2024-01-10",
      downloads: 32,
      isDefault: false,
    },
    {
      id: 3,
      name: "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Usability Testing",
      category: "usability",
      description: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢",
      version: "3.0.1",
      lastUpdated: "2024-01-08",
      downloads: 28,
      isDefault: true,
    },
    {
      id: 4,
      name: "Checklist ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
      category: "security",
      description: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
      version: "1.2.0",
      lastUpdated: "2024-01-05",
      downloads: 15,
      isDefault: false,
    },
  ];

  const getStatusBadge = (status) => {
    switch (status) {
      case "available":
        return <Badge bg="success">‡∏ß‡πà‡∏≤‡∏á</Badge>;
      case "occupied":
        return <Badge bg="warning">‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á</Badge>;
      case "maintenance":
        return <Badge bg="danger">‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á</Badge>;
      default:
        return <Badge bg="secondary">‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö</Badge>;
    }
  };

  const getFacilityTypeIcon = (type) => {
    switch (type) {
      case "testing-room":
        return "üß™";
      case "meeting-room":
        return "üè¢";
      case "equipment":
        return "‚öôÔ∏è";
      case "assistive-tech":
        return "‚ôø";
      default:
        return "üìã";
    }
  };

  const getCategoryIcon = (category) => {
    switch (category) {
      case "accessibility":
        return "‚ôø";
      case "performance":
        return "‚ö°";
      case "usability":
        return "üë§";
      case "security":
        return "üîí";
      default:
        return "üìÑ";
    }
  };

  const handleAddNew = (type) => {
    setModalType(type);
    setSelectedItem(null);
    setShowModal(true);
  };

  const handleEdit = (type, item) => {
    setModalType(type);
    setSelectedItem(item);
    setShowModal(true);
  };

  return (
    <div className="system-settings-container">
      {/* Page Header */}
      <div className="settings-header">
        <h1 className="settings-title">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h1>
        <p className="settings-subtitle">
          ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
        </p>
      </div>

      {/* Settings Tabs */}
      <Tabs
        activeKey={activeTab}
        onSelect={setActiveTab}
        className="settings-tabs mb-4"
      >
        {/* Testing Categories Tab */}
        <Tab eventKey="categories" title="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö">
          <Card className="settings-card">
            <Card.Header className="card-header-settings">
              <div className="header-with-actions">
                <h5 className="card-title">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h5>
                <Button
                  variant="light"
                  onClick={() => handleAddNew("category")}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                </Button>
              </div>
            </Card.Header>
            <Card.Body className="p-0">
              <Table responsive className="settings-table mb-0">
                <thead>
                  <tr>
                    <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                    <th>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</th>
                    <th>‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</th>
                    <th>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
                  {testingCategories.map((category) => (
                    <tr key={category.id}>
                      <td>
                        <div className="category-name">
                          <span className="category-icon">üß™</span>
                          {category.name}
                        </div>
                      </td>
                      <td>{category.description}</td>
                      <td>
                        <div className="standards-list">
                          {category.standards
                            .slice(0, 2)
                            .map((standard, idx) => (
                              <Badge key={idx} bg="info" className="me-1 mb-1">
                                {standard}
                              </Badge>
                            ))}
                          {category.standards.length > 2 && (
                            <Badge bg="secondary">
                              +{category.standards.length - 2}
                            </Badge>
                          )}
                        </div>
                      </td>
                      <td>
                        {category.isActive ? (
                          <Badge bg="success">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Badge>
                        ) : (
                          <Badge bg="secondary">‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Badge>
                        )}
                      </td>
                      <td>{category.createdDate}</td>
                      <td>
                        <div className="action-buttons">
                          <Button
                            variant="outline-primary"
                            size="sm"
                            onClick={() => handleEdit("category", category)}
                          >
                            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </Button>
                          <Button
                            variant="outline-danger"
                            size="sm"
                          >
                            ‡∏•‡∏ö
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Card.Body>
          </Card>
        </Tab>

        {/* Template Forms Tab */}
        <Tab eventKey="templates" title="‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°">
          <Card className="settings-card">
            <Card.Header className="card-header-settings">
              <div className="header-with-actions">
                <h5 className="card-title">‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°</h5>
                <Button
                  variant="light"
                  onClick={() => handleAddNew("template")}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
                </Button>
              </div>
            </Card.Header>
            <Card.Body className="p-0">
              <Table responsive className="settings-table mb-0">
                <thead>
                  <tr>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï</th>
                    <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                    <th>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô</th>
                    <th>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</th>
                    <th>‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
                  {templateForms.map((template) => (
                    <tr key={template.id}>
                      <td>
                        <div className="template-name">
                          <span className="template-icon">
                            {getCategoryIcon(template.category)}
                          </span>
                          <div>
                            <div className="template-title">
                              {template.name}
                            </div>
                            <div className="template-description">
                              {template.description}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td>
                        <Badge bg="info">
                          {template.category === "accessibility"
                            ? "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á"
                            : template.category === "performance"
                              ? "‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"
                              : template.category === "usability"
                                ? "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"
                                : "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"}
                        </Badge>
                      </td>
                      <td>
                        <code>{template.version}</code>
                      </td>
                      <td>{template.lastUpdated}</td>
                      <td>
                        <Badge bg="success">{template.downloads}</Badge>
                      </td>
                      <td>
                        {template.isDefault ? (
                          <Badge bg="primary">‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</Badge>
                        ) : (
                          <Badge bg="secondary">‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</Badge>
                        )}
                      </td>
                      <td>
                        <div className="action-buttons">
                          <Button
                            variant="outline-primary"
                            size="sm"
                            onClick={() => handleEdit("template", template)}
                          >
                            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </Button>
                          <Button
                            variant="outline-danger"
                            size="sm"
                          >
                            ‡∏•‡∏ö
                          </Button>
                          <Button
                            variant="outline-info"
                            size="sm"
                          >
                            ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Card.Body>
          </Card>
        </Tab>

        {/* General Settings Tab */}
        <Tab eventKey="general" title="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ">
          <Row>
            <Col lg={6}>
              <Card className="settings-card mb-4">
                <Card.Header>
                  <h6>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h6>
                </Card.Header>
                <Card.Body>
                  <Form>
                    <div className="mb-3">
                      <Form.Label>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö</Form.Label>
                      <Form.Control
                        type="text"
                        defaultValue="Universal Testing Tool"
                      />
                    </div>
                    <div className="mb-3">
                      <Form.Label>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</Form.Label>
                      <Form.Control type="text" defaultValue="2.1.0" readOnly />
                    </div>
                    <div className="mb-3">
                      <Form.Label>‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</Form.Label>
                      <Form.Select defaultValue="th">
                        <option value="th">‡πÑ‡∏ó‡∏¢</option>
                        <option value="en">English</option>
                      </Form.Select>
                    </div>
                    <div className="mb-3">
                      <Form.Check
                        type="checkbox"
                        label="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                        defaultChecked
                      />
                    </div>
                    <div className="mb-3">
                      <Form.Check
                        type="checkbox"
                        label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                        defaultChecked
                      />
                    </div>
                  </Form>
                </Card.Body>
              </Card>
            </Col>
            <Col lg={6}>
              <Card className="settings-card mb-4">
                <Card.Header>
                  <h6>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h6>
                </Card.Header>
                <Card.Body>
                  <Alert variant="info">
                    ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: 2024-01-15 02:00 ‡∏ô.
                  </Alert>
                  <Form>
                    <div className="mb-3">
                      <Form.Label>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Form.Label>
                      <Form.Select defaultValue="daily">
                        <option value="hourly">‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</option>
                        <option value="daily">‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô</option>
                        <option value="weekly">‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</option>
                      </Form.Select>
                    </div>
                    <div className="mb-3">
                      <Form.Label>‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á</Form.Label>
                      <Form.Select defaultValue="30">
                        <option value="7">7 ‡∏ß‡∏±‡∏ô</option>
                        <option value="30">30 ‡∏ß‡∏±‡∏ô</option>
                        <option value="90">90 ‡∏ß‡∏±‡∏ô</option>
                        <option value="365">1 ‡∏õ‡∏µ</option>
                      </Form.Select>
                    </div>
                    <Button variant="primary">‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</Button>
                  </Form>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>
      </Tabs>

      {/* Add/Edit Modal */}
      <Modal
        show={showModal}
        onHide={() => setShowModal(false)}
        size="lg"
        centered
      >
        <Modal.Header closeButton>
          <Modal.Title>
            {selectedItem ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"}
            {modalType === "category" ? "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö" : "‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°"}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            {modalType === "category" && (
              <>
                <div className="mb-3">
                  <Form.Label>‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                    defaultValue={selectedItem?.name || ""}
                  />
                </div>
                <div className="mb-3">
                  <Form.Label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                    defaultValue={selectedItem?.description || ""}
                  />
                </div>
                <div className="mb-3">
                  <Form.Label>‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô WCAG 2.1 AA, Section 508"
                    defaultValue={selectedItem?.standards?.join(", ") || ""}
                  />
                </div>
                <div className="mb-3">
                  <Form.Check
                    type="checkbox"
                    label="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                    defaultChecked={selectedItem?.isActive ?? true}
                  />
                </div>
              </>
            )}

            {modalType === "template" && (
              <>
                <div className="mb-3">
                  <Form.Label>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï"
                    defaultValue={selectedItem?.name || ""}
                  />
                </div>
                <div className="mb-3">
                  <Form.Label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Form.Label>
                  <Form.Select defaultValue={selectedItem?.category || ""}>
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
                    <option value="accessibility">‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</option>
                    <option value="performance">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</option>
                    <option value="usability">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢</option>
                    <option value="security">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</option>
                  </Form.Select>
                </div>
                <div className="mb-3">
                  <Form.Label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï"
                    defaultValue={selectedItem?.description || ""}
                  />
                </div>
                <Row>
                  <Col md={6} className="mb-3">
                    <Form.Label>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô</Form.Label>
                    <Form.Control
                      type="text"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô 1.0.0"
                      defaultValue={selectedItem?.version || ""}
                    />
                  </Col>
                  <Col md={6} className="mb-3">
                    <Form.Label>‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï</Form.Label>
                    <Form.Control type="file" accept=".pdf,.docx,.xlsx" />
                  </Col>
                </Row>
                <div className="mb-3">
                  <Form.Check
                    type="checkbox"
                    label="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
                    defaultChecked={selectedItem?.isDefault ?? false}
                  />
                </div>
              </>
            )}
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </Button>
          <Button variant="primary">
            {selectedItem ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"}
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default SystemSettings;
